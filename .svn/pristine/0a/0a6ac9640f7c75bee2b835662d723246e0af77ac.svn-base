package com.renrengame.bigdata.util;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.BlockLocation;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.hdfs.DistributedFileSystem;
import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
import org.apache.hadoop.io.IOUtils;
import org.apache.hadoop.mapreduce.Job;

public class HDFS_File {

	// read the file from HDFS
	public static FSDataInputStream ReadFile(Configuration conf, Path path) {
		FileSystem hdfs;
	    FSDataInputStream stream = null;
		try {
			hdfs = FileSystem.get(conf);
			stream = hdfs.open(path);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return stream;
	}
	
	public static FSDataInputStream ReadFile(Configuration conf, String FileName) {
		return ReadFile(conf, new Path(FileName));
	}
	
	public static Path[] ReadFiles(Configuration conf, String path) {
		FileSystem hdfs;
	    Path[] paths;
		try {
			hdfs = FileSystem.get(conf);
			FileStatus[] status = hdfs.listStatus(new Path(path));
			if(status == null)
				return null;
			else {
				paths = new Path[status.length];
				for(int i = 0; i<status.length; i++)
					paths[i] = status[i].getPath();
			}
			return paths;
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
		
	}
	
	public static boolean IsDirectory(Configuration conf, String FileName) {
		boolean isDir = false;
		try {
			FileSystem hdfs = FileSystem.get(conf);
			Path path = new Path(FileName);
			isDir = hdfs.getFileStatus(path).isDirectory();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return isDir;
	}
	
	public static boolean IsFile(Configuration conf, String FileName) {
		boolean isFile = false;
		try {
			FileSystem hdfs = FileSystem.get(conf);
			Path path = new Path(FileName);
			isFile = hdfs.getFileStatus(path).isFile();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return isFile;
	}
	
	// checke if a file exists in HDFS
	public static boolean CheckFileExist(Configuration conf, String FileName) {
		try {
			FileSystem hdfs = FileSystem.get(conf);
			Path path = new Path(FileName);
			boolean isExists = hdfs.exists(path);
			return isExists;
		} catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}

	// copy the file from HDFS to local
	public static void GetFile(Configuration conf, String srcFile, String dstFile, boolean delSrc) {
		try {
			FileSystem hdfs = FileSystem.get(conf);
			Path srcPath = new Path(srcFile);
			Path dstPath = new Path(dstFile);
			hdfs.copyToLocalFile(delSrc, srcPath, dstPath);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// copy the local file to HDFS
	public static void PutFile(Configuration conf, String srcFile, String dstFile) {
		try {
			FileSystem hdfs = FileSystem.get(conf);
			Path srcPath = new Path(srcFile);
			Path dstPath = new Path(dstFile);
			hdfs.copyFromLocalFile(srcPath, dstPath);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// create the new file
	public static FSDataOutputStream CreateFile(Configuration conf, String FileName) {
		try {
			FileSystem hdfs = FileSystem.get(conf);
			Path path = new Path(FileName);
			FSDataOutputStream outputStream = hdfs.create(path);
			return outputStream;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	// rename the file name
	public static boolean ReNameFile(Configuration conf, String srcName, String dstName) {
		try {
			FileSystem hdfs = FileSystem.get(conf);
			Path fromPath = new Path(srcName);
			Path toPath = new Path(dstName);
			boolean isRenamed = hdfs.rename(fromPath, toPath);
			return isRenamed;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}

	// delete the file
	// tyep = true, delete the directory
	// type = false, delete the file
	public static boolean DelFile(Configuration conf, String FileName, boolean type) {
		try {
			FileSystem hdfs = FileSystem.get(conf);
			Path path = new Path(FileName);
			boolean isDeleted = hdfs.delete(path, type);
			return isDeleted;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return false;
	}



	// Get the locations of a file in the HDFS cluster
	public static List<String[]> GetFileBolckHost(Configuration conf, String FileName) {
		try {
			List<String[]> list = new ArrayList<String[]>();
			FileSystem hdfs = FileSystem.get(conf);
			Path path = new Path(FileName);
			FileStatus fileStatus = hdfs.getFileStatus(path);

			BlockLocation[] blkLocations = hdfs.getFileBlockLocations(
					fileStatus, 0, fileStatus.getLen());

			int blkCount = blkLocations.length;
			for (int i = 0; i < blkCount; i++) {
				String[] hosts = blkLocations[i].getHosts();
				list.add(hosts);
			}
			return list;
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}


	public static void main(String[] args) {
		Job job;
		try {
			job = new Job();
			job.setJarByClass(ValueCounter.class);
			job.getConfiguration().set("fs.defaultFS", "hdfs://NYSJHL101-142.opi.com:8020");  
			job.getConfiguration().set("hadoop.job.user", "hdfs");  		  
			job.getConfiguration().set("mapred.job.tracker", "NYSJHL101-144.opi.com:8021");
			HDFS_File.ReadFiles(job.getConfiguration(), "hdfs:/bigdata/NBModel/NBModel.conf");
			boolean bo = HDFS_File.CheckFileExist(job.getConfiguration(), "/bigdata/NBModel");
			System.out.println(bo);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		
		
	}
}
